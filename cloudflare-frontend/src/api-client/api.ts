/* tslint:disable */
/* eslint-disable */
/**
 * Hono API
 * User API with OpenAPI documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface PostLogin200Response
 */
export interface PostLogin200Response {
    /**
     * 
     * @type {string}
     * @memberof PostLogin200Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostLogin200Response
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostLogin200Response
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {User}
     * @memberof PostLogin200Response
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface PostLoginRequest
 */
export interface PostLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof PostLoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof PostLoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PostRefresh200Response
 */
export interface PostRefresh200Response {
    /**
     * 
     * @type {string}
     * @memberof PostRefresh200Response
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface PostRefreshRequest
 */
export interface PostRefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof PostRefreshRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface PostUserRequest
 */
export interface PostUserRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface PostUsersSearchRequest
 */
export interface PostUsersSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUsersSearchRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostUsersSearchRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface PutUserByIdRequest
 */
export interface PutUserByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof PutUserByIdRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutUserByIdRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutUserByIdRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the user, generated as a UUID.
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * The user\'s username.
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * The user\'s password. Omit in responses.
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * The user\'s email address.
     * @type {string}
     * @memberof User
     */
    'email': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a user by their ID.
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserById', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data for the currently authenticated user.
         * @summary Get logged-in user\'s profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a user by their unique ID.
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a list of all users.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticates a user and returns tokens if successful.
         * @summary User login
         * @param {PostLoginRequest} postLoginRequest User login credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (postLoginRequest: PostLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postLoginRequest' is not null or undefined
            assertParamExists('postLogin', 'postLoginRequest', postLoginRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uses a valid refresh token to issue a new access token.
         * @summary Refresh access token
         * @param {PostRefreshRequest} postRefreshRequest Refresh token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefresh: async (postRefreshRequest: PostRefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRefreshRequest' is not null or undefined
            assertParamExists('postRefresh', 'postRefreshRequest', postRefreshRequest)
            const localVarPath = `/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a user and returns the created object.
         * @summary Create a new user
         * @param {PostUserRequest} postUserRequest User object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser: async (postUserRequest: PostUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUserRequest' is not null or undefined
            assertParamExists('postUser', 'postUserRequest', postUserRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches users whose email or username match the provided body.
         * @summary Search users by criteria
         * @param {PostUsersSearchRequest} postUsersSearchRequest Search filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersSearch: async (postUsersSearchRequest: PostUsersSearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUsersSearchRequest' is not null or undefined
            assertParamExists('postUsersSearch', 'postUsersSearchRequest', postUsersSearchRequest)
            const localVarPath = `/users/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUsersSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates user details based on the ID.
         * @summary Update a user
         * @param {string} id 
         * @param {PutUserByIdRequest} putUserByIdRequest User object with new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserById: async (id: string, putUserByIdRequest: PutUserByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUserById', 'id', id)
            // verify required parameter 'putUserByIdRequest' is not null or undefined
            assertParamExists('putUserById', 'putUserByIdRequest', putUserByIdRequest)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putUserByIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a user by their ID.
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns data for the currently authenticated user.
         * @summary Get logged-in user\'s profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches a user by their unique ID.
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches a list of all users.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Authenticates a user and returns tokens if successful.
         * @summary User login
         * @param {PostLoginRequest} postLoginRequest User login credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(postLoginRequest: PostLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(postLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Uses a valid refresh token to issue a new access token.
         * @summary Refresh access token
         * @param {PostRefreshRequest} postRefreshRequest Refresh token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRefresh(postRefreshRequest: PostRefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRefresh200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRefresh(postRefreshRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postRefresh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a user and returns the created object.
         * @summary Create a new user
         * @param {PostUserRequest} postUserRequest User object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUser(postUserRequest: PostUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUser(postUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches users whose email or username match the provided body.
         * @summary Search users by criteria
         * @param {PostUsersSearchRequest} postUsersSearchRequest Search filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersSearch(postUsersSearchRequest: PostUsersSearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUsersSearch(postUsersSearchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUsersSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates user details based on the ID.
         * @summary Update a user
         * @param {string} id 
         * @param {PutUserByIdRequest} putUserByIdRequest User object with new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserById(id: string, putUserByIdRequest: PutUserByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserById(id, putUserByIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Deletes a user by their ID.
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns data for the currently authenticated user.
         * @summary Get logged-in user\'s profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a user by their unique ID.
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a list of all users.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticates a user and returns tokens if successful.
         * @summary User login
         * @param {PostLoginRequest} postLoginRequest User login credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(postLoginRequest: PostLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostLogin200Response> {
            return localVarFp.postLogin(postLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Uses a valid refresh token to issue a new access token.
         * @summary Refresh access token
         * @param {PostRefreshRequest} postRefreshRequest Refresh token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefresh(postRefreshRequest: PostRefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostRefresh200Response> {
            return localVarFp.postRefresh(postRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a user and returns the created object.
         * @summary Create a new user
         * @param {PostUserRequest} postUserRequest User object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser(postUserRequest: PostUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.postUser(postUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches users whose email or username match the provided body.
         * @summary Search users by criteria
         * @param {PostUsersSearchRequest} postUsersSearchRequest Search filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersSearch(postUsersSearchRequest: PostUsersSearchRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.postUsersSearch(postUsersSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates user details based on the ID.
         * @summary Update a user
         * @param {string} id 
         * @param {PutUserByIdRequest} putUserByIdRequest User object with new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserById(id: string, putUserByIdRequest: PutUserByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.putUserById(id, putUserByIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Deletes a user by their ID.
     * @summary Delete a user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserById(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data for the currently authenticated user.
     * @summary Get logged-in user\'s profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a user by their unique ID.
     * @summary Get a user by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserById(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a list of all users.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticates a user and returns tokens if successful.
     * @summary User login
     * @param {PostLoginRequest} postLoginRequest User login credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogin(postLoginRequest: PostLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postLogin(postLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uses a valid refresh token to issue a new access token.
     * @summary Refresh access token
     * @param {PostRefreshRequest} postRefreshRequest Refresh token payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postRefresh(postRefreshRequest: PostRefreshRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postRefresh(postRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a user and returns the created object.
     * @summary Create a new user
     * @param {PostUserRequest} postUserRequest User object to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUser(postUserRequest: PostUserRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUser(postUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches users whose email or username match the provided body.
     * @summary Search users by criteria
     * @param {PostUsersSearchRequest} postUsersSearchRequest Search filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUsersSearch(postUsersSearchRequest: PostUsersSearchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUsersSearch(postUsersSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates user details based on the ID.
     * @summary Update a user
     * @param {string} id 
     * @param {PutUserByIdRequest} putUserByIdRequest User object with new data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUserById(id: string, putUserByIdRequest: PutUserByIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUserById(id, putUserByIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



